declare module '@capacitor/core' {
  interface PluginRegistry {
    UXCam: IUXCamPlugin;
  }
}

export interface IUXCamPlugin {
  startWithKey(options: {
    key: string;
    appVariant?: string;
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  startNewSession(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  stopSessionAndUploadData(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  tagScreenName(options: {
    screenName: string;
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  setAutomaticScreenNameTagging(options: {
    enableAutomaticNameTagging: boolean;
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  setUserIdentity(options: {
    name: string;
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  setUserProperty(options: {
    key: string;
    value: string;
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  setSessionProperty(options: {
    key: string;
    value: string;
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  isRecording(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<{ result: boolean }>;
  pauseScreenRecording(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  resumeScreenRecording(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  optOutOverall(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  optOutOfSchematicRecordings(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  optInOverall(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  optIntoSchematicRecordings(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  optInOverallStatus(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  optInSchematicRecordingStatus(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;

  cancelCurrentSession(options: {
    isEnabled?: boolean;
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  resumeShortBreakForAnotherApp(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  getMultiSessionRecord(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  setMultiSessionRecord(options: {
    mulitSession: any;
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  deletePendingUploads(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  pendingSessionCount(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  uploadPendingSession(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  logEvent(options: {
    eventName: string;
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  logEventWithProperties(options: {
    eventName: string;
    properties: any;
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  occludeSensitiveScreen(options: {
    occludeSensitiveScreen: string;
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  occludeAllTextView(options: {
    occludeAllTextView: string;
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  urlForCurrentUser(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  urlForCurrentSession(options: {
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
  occludeRectsOnNextFrame(options: {
    rects: any;
    successCallback?: Function;
    errorCallback?: Function;
  }): Promise<void>;
}
